import socket
import threading

if __name__ == '__main__':
    # 创建tcp服务端套接字
    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 设置端口号复用, 程序退出端口立即释放
    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
    # 绑定端口号
    tcp_server_socket.bind(("", 9001))
    # 设置监听
    tcp_server_socket.listen(128)
    while True:
        # 等待接受客户端的连接请求
        new_socket, ip_port = tcp_server_socket.accept()
        print('新的服务器socket',new_socket,'新的客户端',ip_port)
        # 代码执行到此，说明连接建立成功
        recv_data = new_socket.recv(4096)
        # 对二进制数据进行解码
        if len(recv_data) == 0:
            print('客户端下线了',ip_port)
            new_socket.close()
            continue

        path = recv_data.decode("utf-8").split(' ',2)[1]
        if path =='/':
            path = '/index.html'
        print('\n\n',path)

        try:
            with open('static'+path,'rb') as file:
                response_body = file.read()
        except:
            response_line = "HTTP/1.1 404 Not Found\r\n"
            response_head = "Server: web\r\n"
            with open("..\..\..\python\exam_06_12\static\error.html", "rb") as file:
                response_body = file.read()
            response_data  = (response_line + response_head + '\r\n').encode("utf-8") + response_body
            new_socket.send(response_data)
        else:
            response_line = "HTTP/1.1 200 OK\r\n"
            response_head = "Server: web\r\n"
            response_data = (response_line + response_head + '\r\n').encode("utf-8") + response_body
            new_socket.send(response_data)
        finally:
            new_socket.close()

